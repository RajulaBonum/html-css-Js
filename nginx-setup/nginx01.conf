/* events context is used for setting global configuration regarding how NGINX is going to handle requests on general level. There can only be one event in a config file */

events {
	
}

/* http context is used for defining configuration regarding how the server is going to handle HTTP and HTTPS requests. Only one in a config file */
//Block directives/context

http {

	/* Type context helps to tell NGINX the type of file it is serving (Content-Type) */

	types {
		text/html html;
		text/css css;

		//using the mime.types file to configure all the differnt types.
		include /etc/nginx/mime.types;
	}

	/* server is nested inside a http and used for configuring specific virtual servers within a single host. There can be multible each considered a virtual host.*/

	server {

		//simple directives
		listen 80;
		server_name nginx-handbook.test;

		return 200 "Bonjour, mon ami!\n";
	}

	server {

		listen 8080;
		server_name nginx-handbook.test;

		return 200 "hello from port 8080\n";
	}

	server {

		listen 8080;
		server_name nginx-handbook.test;

		root /srv/mydir/static-demo; //folder with static files -- serves index.html file by default
	}
}

/* Main context is the configuration file itself */
/* Dynamic Routing NGINX
	- Location context
	- Variables
	- Redirects
	- Rewrites
	- try_files directives */

	Location

events {
	
}

http {
	
	server {
		listen 80;
		server_name nginx-handbook.test;

		//location /agatha (match any URI starting with "agatha" - prefix match)
		location /agatha {
			return 200 "Miss Marple.\nHercule Poirot. \n";
		}

		//location = /rajula (This is an exact match)
		location = /rajula {
			return 200 "Rajula is an exact location\n";
		}

		//location ~ /rajula[0-9] (This is a regex match. It is case sensitive add '*' to make it case insensitive = ~*)
		location ~ /rajula[0-9] {
			return 200 "I am a regex match\n";
		}

		//'^~' to make preferential prefix on location
	}
}


	Variables
//Declared by 'set' directive
//Types = String, Integer, Boolean

events {
	
}

http {
	
	server {
		listen 80;
		server_name nginx-handbook.test;

		return 200 "Host - $host\nURI - $uri\nArgs - $args\n";
	}

	server {
		listen 8080;
		server_name rajulabonum.tech;

		set $name $arg_name; # $arg_<query string name>

		return 200 "Name - $name\n";
	}
}


	Redirects and Rewrites

events {
	
}

http {
	
	include /etc/nginx/mime.types;

	server {

		listen 80;
		server_name rajulabonum.tech;

		root /srv/mydirectory/static-files;

		//Redirect
		location = /index_page {
			return 307 /index.html
		}

		location = /about_page {
			return 307 /about.html
		}
	}

	server {

		//Rewrites
		listent 80;
		server_name rajulabonum.tech;

		root /srv/mydirectory/static-files;

		rewrite /index_page /index.html;

		rewrite /about_page /about.html;
	}
}


	try_files

events {
	
}

http {
	
	include /etc/nginx/mime.types;

	server {
		listen 80;
		server_name nginx-handbook.test;

		root /srv/mydirectory/static-files;

		try_files /the-nginx-handbook.jpg /not_found;

		//prefered use
		try_files $uri $uri/ /not_found;

		location /not_found {
			return 404 "sadly, you've hit a brick wall buddy!\n";
		}
	}
}


/* Logging in NGINX */
log files - /var/log/nginx

# delete the old files
sudo rm /var/log/nginx/access.log /var/log/nginx/error.log

# create new files
sudo touch /var/log/nginx/access.log /var/log/nginx/error.log

# reopen the log files
sudo nginx -s reopen

There are eight levels of error messages:

debug – Useful debugging information to help determine where the problem lies.
info – Informational messages that aren't necessary to read but may be good to know.
notice – Something normal happened that is worth noting.
warn – Something unexpected happened, however is not a cause for concern.
error – Something was unsuccessful.
crit – There are problems that need to be critically addressed.
alert – Prompt action is required.
emerg – The system is in an unusable state and requires immediate attention.